{
  "README.html": {
    "href": "README.html",
    "title": "PI Adapter for Modbus TCP",
    "keywords": "PI Adapter for Modbus TCP ( OSIsoft ) is a proven leader in enabling operation intelligence. In this GitHub repo, we provide samples which will help you get started with using OSIsoft technology. The repo includes samples against the PI Server via PI Web API, samples using OSIsoft Cloud Services ( OCS ) via the OCS API directly and using libraries, and samples creating OSIsoft Message Format ( OMF ) messages and sending them. The samples are intended to help you get started and are not production applications and libraries. The official OSIsoft samples are organized by technology and accessible through the following table: Note: these samples have transitioned to be hosted in seperate repositories based on their technology. Technology Description OCS These samples cover programming against OCS. Samples include basic samples to more advanced. Details OMF These samples highlight forming and sending OMF messages for PI and OCS. Details PI System These samples cover topics related to the PI System. Details Edge These samples cover topics related to OSIsoft Edge technologies. Details Note: The OMF samples work against both the on-prem PI System and OCS. About this repo The style guide describes the organization of the repo and the code samples provided. The test guide goes into detail about the included automated tests. The on prem testing document describes the software installed on our internal OSIsoft build agent. Feedback If you have a need for a new sample, if there is a feature or capability that should be demonstrated, or if there is an existing sample that should be in your favorite language, please reach out to us and give us feedback at https://feedback.osisoft.com under the OSIsoft GitHub Channel . Support If your support question or issue is related to an OSIsoft product (an error message, a problem with product configuration, etc...), please open a case with OSIsoft Tech Support through myOSIsoft Customer Portal ( https://my.osisoft.com ). If your support question or issue is related to a non-modified sample (or test) or documentation for the sample, please email Samples@osisoft.com. Contributions If you wish to contribute please take a look at the contribution guide . License OSI Samples are licensed under the Apache 2 license ."
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration PI Adapter for Modbus TCP provides configuration of data source and data selection. The examples in the configuration topics use curl , a commonly available tool on both Windows and Linux. You can configure the adapter with any programming language or tool that supports making REST calls or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval ( GET commands) with a browser, if available, on your device. For more information on PI Adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/PI Adapter for Modbus TCP data selection configuration.html": {
    "href": "V1/Configuration/PI Adapter for Modbus TCP data selection configuration.html",
    "title": "PI Adapter for Modbus TCP data selection configuration",
    "keywords": "PI Adapter for Modbus TCP data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the adapter to collect from the data sources. Configure Modbus TCP data selection You cannot modify Modbus TCP data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following steps to configure the Modbus TCP data selection: Using any text editor, create a file that contains a Modbus TCP data selection in the JSON format. For content structure, see Modbus TCP data selection examples . For a table of all available parameters, see Modbus TCP data selection parameters . Save the file. For example, DataSelection.config.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint: Note: The following examples use Modbus1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/<componentID>/DataSelection/ Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/Modbus1/DataSelection\" PUT endpoint: http://localhost:5590/api/v1/configuration/<componentID>/DataSelection/<ID> Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/Modbus1/DataSelection/DataItem1\" Modbus TCP data selection schema The full schema definition for the Modbus data selection configuration is in the Modbus_DataSelection_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas Modbus TCP data selection parameters The following parameters are available to configure a Modbus TCP data selection: Parameter Required Type Description Id Optional string Updates an existing measurement. The ID automatically updates when there are changes to the measurement and follows the format of <DeviceId >. <UnitId >. <RegisterType >. <RegisterOffset >. DeviceId Required string Specifies the DataSource device that this data selection item is read from. The value must match one of the <Id> values specified in the DataSource Devices configuration. Selected Optional boolean Selects or clears a measurement. To select an item, set to true . To remove an item, leave the field empty or set to false. Allowed value: true or false Default value: true Name Optional string The optional friendly name of the data item collected from the data source. Default value: stream ID UnitId Required number Modbus TCP slave device unit ID. Minimum value: 0 Maximum value: 247 RegisterType Required number or string Modbus TCP register type. Supported types are Coil , Discrete , Input16 , Input32 , Holding16 and Holding32 . Input16 and Holding16 are used to read registers that have a size of 16 bits. For registers that have a size of 32 bits, use the Input32 and Holding32 register types. To represent the types, you can type in the register type ID or the exact name: Allowed values: 1 or Coil (Read Coil Status) 2 or Discrete (Read Discrete Input Status) 3 or Holding16 (Read 16-bit Holding Registers) 4 or Holding32 (Read 32-bit Holding Registers) 6 or Input16 (Read 16-bit Input Registers) 7 or Input32 (Read 32-bit Input Registers) For more information, see Register types . RegisterOffset Required number The 0 relative offset to the starting register for this measurement. For example, if your Holding registers start at base register 40001, the offset to this register is 0. For 40002, the offset to this register is 1. DataTypeCode Required number An integer representing the data type that the adapter will read starting at the register specified by the offset. Supported data types: 1 = Boolean 10 = Int16 20 = UInt16 30 = Int32 31 = Int32ByteSwap 100 = Float32 101 = Float32ByteSwap 110 = Float64 111 = Float64ByteSwap 1001 - 1250 = String 2001 - 2250 = StringByteSwap ScheduleId Required string The ID of an existing schedule for reading values. BitMap Optional string The bitmap is used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz, where uu, vv, ww, yy, and zz each refer to a single bit. A leading zero is required if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Up to 16 bits can be referenced for a 16-bit word (data types 10 and 20) and up to 32 bits can be referenced for a 32-bit word (data type 30 and 31). The bitmap 0307120802 maps the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, and so on. The high-order bits of the new word are padded with zeros if they are not specified. ConversionFactor Optional number Use this numerical value to scale the raw response received from the Modbus TCP device. If you specify ConversionFactor, regardless of the specified data type, the value is promoted to a float32 (single) when stored. [Result = (Value / Conversion Factor)] ConversionOffset Optional number Use this numerical value to apply an offset to the response received from the Modbus TCP device. If you specify ConversionOffset, regardless of the specified data type, the value is promoted to a float32 (single) when stored. [Result = (Value - Conversion Offset)] DataFilterId Optional string If you want data filtering for this data selection item, specify the name of an existing data filter. If you do not specify the value or set it to null , all values read are output without being filtered. StreamID Optional string The custom stream ID that is used to create the streams. If you do not specify the StreamID, the adapter generates a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > ` Each JSON object in the file represents a measurement. You can modify the fields in each object to configure the measurement parameters. To add more measurements, you need to create more JSON objects with properly completed fields. Register types Register types are used to configure measurements in Modbus TCP data selection. The adapter supports six register types, corresponding to four function codes (1-4). Since one function code can return two types of registers, 16-bit or 32-bit depending on the device, either the register type or the register type code is required when configuring the data selection for the adapter. The following table lists all the register types supported in the adapter. Register Type Register Type Code Description Function Code Coil 1 Read Coil Status 1 Discrete 2 Read Discrete Input Status 2 Holding16 3 Read 16-bit Holding Registers 3 Holding32 4 Read 32-bit Holding Registers 3 Input16 6 Read 16-bit Input Registers 4 Input32 7 Read 32-bit Input Registers 4 When reading from function codes 1 and 2 , the adapter expects these to be returned as single bits. For function codes 3 and 4 , the adapter expects 16 bits to be returned from devices that contain 16-bit registers and 32 bits to be returned from devices that contain 32-bit registers. DataTypeCode DataTypeCode 1 Name Value Type Register Type Meaning Output Type Interface data type code BoolModbus Bool Coil Discrete 0=Modbus0 / 1=Modbus1 bool NA DataTypeCode 10 Name Value Type Register Type Meaning Output Type Interface data type code Int16 Int16 Bool / 16-bit Read 1 Modbus register 1 and interpret as a 16-bit integer. Bytes [BA] read from the PLC are stored as [AB]. 2 Int16 1 DataTypeCode 20 Name Value Type Register Type Meaning Output Type Interface data type code UInt16 UInt16 Bool / 16-bit Read 1 Modbus register 1 and interpret as an unsigned 16-bit integer. Bytes [BA] read from the PLC are stored as [AB]. 2 Int32 11 DataTypeCode 30 Name Value Type Register Type Meaning Output Type Interface data type code Int32 Int32 16- / 32-bit Read 32-bits from the PLC and interpret as a 32-bit integer. Bytes [DCBA] read from the PLC are stored as [ABCD]. 2 Int32 7 DataTypeCode 31 Name Value Type Register Type Meaning Output Type Interface data type code Int32ByteSwap Int32 16- / 32-bit Read 32-bits from the PLC and interpret as a 32-bit integer. Bytes [BADC] read from the PLC are stored as [ABCD]. 2 Int32 7 DataTypeCode 100 Name Value Type Register Type Meaning Output Type Interface data type code Float32 Float32 16- / 32-bit Read 32-bits from the PLC and interpret as a 32-bit float. Bytes [DCBA] read from the PLC are stored as [ABCD]. 2 Float32 6 DataTypeCode 101 Name Value Type Register Type Meaning Output Type Interface data type code Float32ByteSwap Float32 16- / 32-bit Read 32-bits from the PLC and interpret as a 32-bit float. Bytes [BADC] read from the PLC are stored as [ABCD]. 2 Float32 6 DataTypeCode 110 Name Value Type Register Type Meaning Output Type Interface data type code Float64 Float64 16- / 32-bit Read 64-bits from the PLC and interpret as a 64-bit float. Bytes [HGFEDCBA] read from the device are stored as [ABCDEFGH]. 2 Float64 6 DataTypeCode 111 Name Value Type Register Type Meaning Output Type Interface data type code Float64ByteSwap Float64 16- / 32-bit Read 64-bits from the PLC and interpret as a 64-bit float. Bytes [BADCFEHG] read from the device are stored as [ABCDEFGH]. 2 Float64 6 DataTypeCode 1001-1250 Name Value Type Register Type Meaning Output Type Interface data type code String String 16- / 32-bit 1001 will a 1-character string, 1002 will read a 2-character string, 1003 will read a 3-character string and so on. Bytes [AB] are interpreted as \"AB\". String 101 to 199 DataTypeCode 2001-2250 Name Value Type Register Type Meaning Output Type Interface data type code StringByteSwap String 16- / 32-bit 2001 will a 1-character string, 2002 will read a 2-character string, 2003 will read a 3-character string and so on. Bytes [BA] are interpreted as \"AB\". String 101 to 199 1 For more information about Modbus TCP registers, see How is data stored in Standard Modbus? (https://www.se.com/us/en/faqs/FA168406/) 2 Bytes are read in reverse order. Modbus TCP data selection examples The following are examples of valid Modbus TCP data selection configurations. Minimum data selection configuration: [ { \"DeviceId\" : \"Device1\", \"Selected\" : true, \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 122, \"DataTypeCode\": 20, \"ScheduleId\": \"Schedule1\" } ] Maximum data selection configuration: [ { \"Id\": \"DataItem1\", \"DeviceId\" : \"Device1\", \"Selected\": true, \"Name\": \"MyDataItem\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 123, \"DataTypeCode\": 20, \"ScheduleId\": \"Schedule1\", \"StreamId\": \"stream.1\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5, \"DataFilterId\" : \"DataFilter1\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSelection GET Retrieves the Modbus TCP data selection configuration api/v1/configuration/ ComponentId /DataSelection PUT Configures or updates the Modbus TCP data selection configuration api/v1/configuration/ ComponentId /DataSelection DELETE Deletes the Modbus TCP data selection configuration api/v1/configuration/ ComponentId /DataSelection PATCH Allows partial updating of configured data selection items. Note: The request must be an array containing one or more data selection items. Each data selection item in the array must include its StreamId api/v1/configuration/ ComponentId /DataSelection/ StreamId PUT Updates or creates a new data selection with the specified StreamId api/v1/configuration/ ComponentId /DataSelection/ StreamId DELETE Deletes a specific data selection item of the Modbus TCP data selection configuration Note: Replace ComponentId with the Id of your Modbus TCP component. For example, Modbus1 ."
  },
  "V1/Configuration/PI Adapter for Modbus TCP data source configuration.html": {
    "href": "V1/Configuration/PI Adapter for Modbus TCP data source configuration.html",
    "title": "PI Adapter for Modbus TCP data source configuration",
    "keywords": "PI Adapter for Modbus TCP data source configuration To use the adapter, you must configure the data source from which it polls data. Configure Modbus TCP data source Note: You cannot modify Modbus TCP data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following steps to configure a Modbus TCP data source: Using any text editor, create a file that contains a Modbus TCP data source in the JSON format. For content structure, see Modbus TCP data source examples . For a table of all available parameters, see Modbus TCP data source parameters . Save the file. For example, DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSource/ . Note: The following example uses Modbus1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/Modbus1/DataSource\" Modbus TCP data source schema The full schema definition for the Modbus data source configuration is in the Modbus_DataSource_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas Modbus TCP data source parameters The following parameters are available for configuring a Modbus TCP data source. Parameter Required Type Description Devices Required Array of objects List of Modbus devices that this adapter instance reads. All devices read by the adapter share the common configuration defined in this table. For the properties that a device is comprised of, see the Devices table. StreamIdPrefix Optional string Specifies what prefix is used for Stream IDs. The naming convention is StreamIdPrefix.StreamId. An empty string means no prefix is added to the Stream IDs and names. Null value defaults to ComponentID followed by a dot. Note: Every time you change the StreamIdPrefix of a configured adapter, for example, when you delete and add a data source, you need to restart the adapter for the changes to take place. New streams are created on adapter restart and pre-existing streams are no longer updated. DefaultStreamIdPattern Optional string Naming pattern used for creating Stream IDs when it is not specified for a data item. Default value: {DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset} . ConnectTimeout Optional string Parameter to specify the TimeSpan to wait when the adapter is trying to connect to the data source. * Minimum value: 00:00:01 Maximum value: 00:00:30 Default value: 00:00:05 ReconnectInterval Optional string Parameter to specify the TimeSpan to wait before retrying to connect to the data source when the data source is offline. * Minimum value: 00:00:00.1 Maximum value: 00:00:30 Default value: 00:00:01 RequestTimeout Optional string Parameter to specify the TimeSpan that the adapter waits for a pending request before marking it as timeout and dropping the request. * Allowed value: must be positive Default value: 00:00:10 DelayBetweenRequests Optional string Parameter to specify the minimum TimeSpan between two successive requests sent to the data source. * Minimum value: 00:00:00 Maximum value: 00:00:01 Default value: 00:00:00 MaxResponseDataLength Optional number Parameter to limit the maximum length (in bytes) of data that can be read within one transaction. This feature is provided to support devices that limit the number of bytes that can be returned. If there is no device limitation, the request length should be the maximum length of 250 bytes. Minimum value: 2 Maximum value: 250 Default value: 250 SimultaneousRequests Optional number Parameter to allow multiple simultaneous reads from a single IP address and port combination to prevent scan overruns when a lot of data is being read from a single device. Minimum value: 1 Maximum value: 16 Default value: 1 * Note: You can also specify timespans as numbers in seconds. For example, \"RequestTimeout\": 25 specifies 25 seconds, or \"RequestTimeout\": 125.5 specifies 2 minutes and 5.5 seconds. Devices The following parameters are available for configuring the 'Devices' parameter of a Modbus TCP data source. Parameter Required Type Description Id Required string The ID of the device that is used in data selection to associate a register with a device. IpAddress Required string The IP address of the device from which the data is collected using the Modbus TCP protocol. Host name is not supported. Port Optional number The TCP port of the target device that listens for and responds to Modbus TCP requests. The value ranges from 0 to 65535 . If you do not configure it, the default TCP port is 502 , which is the default port for Modbus TCP protocol. Modbus TCP data source examples The following are examples of valid Modbus TCP data source configurations: Minimum data source configuration: { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\" } ] } Maximum data source configuration: { \"Devices\": [ { \"Id\": \"Device1\", \"IpAddress\": \"127.0.0.1\", \"Port\": 502 }, { \"Id\": \"Device2\", \"IpAddress\": \"127.0.0.2\", \"Port\": 502 }, { \"Id\": \"Device3\", \"IpAddress\": \"127.0.0.3\", \"Port\": 502 } ], \"StreamIdPrefix\": \"my.prefix\", \"DefaultStreamIdPattern\": \"{DeviceId}.{UnitId}.{RegisterType}.{RegisterOffset}\", \"ConnectTimeout\": \"00:00:05\", \"ReconnectInterval\": \"00:00:01\", \"RequestTimeout\": \"00:00:10\", \"DelayBetweenRequests\": \"00:00:00.5\", \"MaxResponseDataLength\": 125, \"SimultaneousRequests\": 1 } REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSource GET Retrieves the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource POST Creates the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource PUT Configures or updates the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource DELETE Deletes the Modbus TCP data source configuration Note: Replace ComponentId with the ID of your Modbus TCP component. For example, Modbus1 ."
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "PI Adapter for Modbus TCP overview",
    "keywords": "PI Adapter for Modbus TCP overview PI Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF (OSIsoft Message Format) endpoints in OSIsoft Cloud Services or PI Servers. Modbus TCP is a commonly available communication protocol used for connecting and transmitting information between industrial electronic devices. The adapter can connect to any device that uses the Modbus TCP communication protocol. You can install the adapter with a download kit that you can obtain from the OSIsoft Customer Portal. You can install the adapter on devices running either Windows or Linux operating systems. Using the REST API, you can configure all functions of the adapter. The configurations are stored in JSON files. For data ingress, you must define an adapter component in the system components configuration for each device to which the adapter will connect. You configure each adapter component with the connection information for the device and the data to collect. For data egress, you must specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once you have configured the adapter and it is sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter. <!-- # PI Adapter for Modbus TCP ======= - [PI Adapter for Modbus TCP overview](xref:PIAdapterForModbusTCPOverview) - [PI Adapter for Modbus TCP principles of operation](xref:PIAdapterForModbusTCPPrinciplesOfOperation) - [PI Adapter for Modbus TCP supported features](xref:PIAdapterForModbusTCPSupportedFeatures) - [Installation](xref:Installation) - [Install the adapter](xref:InstallTheAdapter) - [Install PI Adapter for Modbus TCP using Docker](xref:InstallPIAdapterForModbusTCPUsingDocker) - [Uninstall the adapter](xref:UninstallTheAdapter) - [Configuration](xref:ModbusConfiguration) - [Configuration tools](xref:ConfigurationTools) - [System components configuration](xref:SystemComponentsConfiguration) - [PI Adapter for Modbus TCP data source configuration](xref:PIAdapterForModbusTCPDataSourceConfiguration) - [PI Adapter for Modbus TCP data selection configuration](xref:PIAdapterForModbusTCPDataSelectionConfiguration) - [Egress endpoints configuration](xref:EgressEndpointsConfiguration) - [Health endpoint configuration](xref:HealthEndpointConfiguration) - [Diagnostics configuration](xref:DiagnosticsConfiguration) - [Buffering configuration](xref:BufferingConfiguration) - [Logging configuration](xref:LoggingConfiguration) - [System and adapter configuration](xref:SystemAndAdapterConfiguration) - [Administration](xref:Administration) - [Start and stop an adapter](xref:StartAndStopAnAdapter) - [Start and stop ingress component](xref:StartAndStopIngressComponent) - [Retrieve product version information](xref:RetrieveProductVersionInformation) - [Delete an adapter component](xref:DeleteAnAdapterComponent) - [Health and diagnostics](xref:HealthAndDiagnostics) - [Adapter health](xref:AdapterHealth) - [Device status](xref:DeviceStatus) - [Next health message expected](xref:NextHealthMessageExpected) - [Adapter diagnostics](xref:AdapterDiagnostics) - [System](xref:System) - [Stream count](xref:StreamCount) - [IO rate](xref:IORate) - [Error rate](xref:ErrorRate) - [Egress diagnostics](xref:EgressDiagnostics) -->"
  },
  "V1/Installation/Install PI Adapter for Modbus TCP using Docker.html": {
    "href": "V1/Installation/Install PI Adapter for Modbus TCP using Docker.html",
    "title": "Install PI Adapter for Modbus TCP using Docker",
    "keywords": "Install PI Adapter for Modbus TCP using Docker Docker is a set of tools that you can use on Linux to manage application deployments. Note: If you want to use Docker, you must be familiar with the underlying technology and have determined that it is appropriate for your planned use of the Modbus TCP adapter. Docker is not required to use the Modbus TCP adapter. This topic provides examples of how to create a Docker container with the Modbus TCP adapter. Create a startup script for the adapter Using any text editor, create a script similar to one of the following examples: Note: The script varies slightly by processor. ARM32 #!/bin/sh if [ -z $portnum ] ; then exec /Modbus_linux-arm/OSIsoft.Data.System.Host else exec /Modbus_linux-arm/OSIsoft.Data.System.Host --port:$portnum fi ARM64 #!/bin/sh if [ -z $portnum ] ; then exec /Modbus_linux-arm64/OSIsoft.Data.System.Host else exec /Modbus_linux-arm64/OSIsoft.Data.System.Host --port:$portnum fi AMD64 #!/bin/sh if [ -z $portnum ] ; then exec /Modbus_linux-x64/OSIsoft.Data.System.Host else exec /Modbus_linux-x64/OSIsoft.Data.System.Host --port:$portnum fi Name the script modbusdockerstart.sh and save it to the directory where you plan to create the container. Create a Docker container containing the Modbus TCP adapter Create the following Dockerfile in the directory where you want to create and run the container. Note: Dockerfile is the required name for the file. Use the variation according to your operating system: ARM32 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu60 libssl1.1 curl COPY modbusdockerstart.sh / RUN chmod +x /modbusdockerstart.sh ADD ./Modbus_linux-arm.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] ARM64 FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY modbusdockerstart.sh / RUN chmod +x /modbusdockerstart.sh ADD ./Modbus_linux-arm64.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] AMD64 (x64) FROM ubuntu WORKDIR / RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y ca-certificates libicu66 libssl1.1 curl COPY modbusdockerstart.sh / RUN chmod +x /modbusdockerstart.sh ADD ./Modbus_linux-x64.tar.gz . ENTRYPOINT [\"/modbusdockerstart.sh\"] Copy the Modbus_linux-\\<platform>.tar.gz file to the same directory as the Dockerfile . Copy the modbusdockerstart.sh script to the same directory as the Dockerfile . Run the following command line in the same directory ( sudo may be necessary): docker build -t modbusadapter . Run the Modbus TCP adapter Docker container REST access from the local host to the Docker container Complete the following to run the container: Use the docker container image modbusadapter previously created. Type the following in the command line ( sudo may be necessary): docker run -d --network host modbusadapter Port 5590 is accessible from the host and you can make REST calls to Modbus TCP adapter from applications on the local host computer. In this example, all data stored by the Modbus TCP adapter is stored in the container itself. When you delete the container, the stored data is also deleted. Provide persistent storage for the Docker container Complete the following to run the container: Use the docker container image modbusadapter previously created. Type the following in the command line ( sudo may be necessary): docker run -d --network host -v /modbus:/usr/share/OSIsoft/ modbusadapter Port 5590 is accessible from the host and you can make REST calls to Modbus TCP adapter from applications on the local host computer. In this example, all data that is written to the container is instead written to the host directory and the host directory is a directory on the local machine, /modbus . You can specify any directory. Port number change To use a different port other than 5590 , you can specify a portnum variable on the docker run command line. For example, to start the adapter using port 6000 instead of 5590 , you use the following command: docker run -d -e portnum=6000 --network host modbusadapter This command accesses the REST API with port 6000 instead of port 5590 . The following curl command returns the configuration for the container. curl http://localhost:6000/api/v1/configuration Remove REST access to the Docker container If you remove the --network host option from the docker run command, REST access is not possible from outside of the container. This may be valuable when you want to host an application in the same container as the Modbus TCP adapter, but you do not want external REST access enabled."
  },
  "V1/Installation/System requirements.html": {
    "href": "V1/Installation/System requirements.html",
    "title": "System requirements",
    "keywords": "System requirements PI Adapter for Modbus TCP is supported on a variety of platforms and processors. Install kits are available for the following platforms: Operating System Installation Kit Processor(s) Windows 10 x64 (any version) Modbus_win10-x64.msi Intel/AMD 64-bit processors Debian 9 or later x64 Modbus_linux-x64.deb Intel/AMD 64-bit processors Debian 9 or later arm32 Modbus_linux-arm.deb Arm 32-bit processors Debian 9 or later arm64 Modbus_linux-arm64.deb Arm 64-bit processors Alternatively, you can use tar.gz files with binaries to build your own custom installers or containers for Linux. For more information on installing PI Adapter for Modbus TCP with Docker containers, see Install PI Adapter for Modbus TCP using Docker ."
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "PI Adapter Docs",
    "keywords": "PI Adapter Docs"
  },
  "V1/main/Templates/Release Notes Template.html": {
    "href": "V1/main/Templates/Release Notes Template.html",
    "title": "Release Notes",
    "keywords": "Release Notes { Product Version x.x } © 2020 OSIsoft, LLC. All rights reserved. <!--*This section may be removed if this note is part of a broader manual.*--> Overview <!--Insert brief description of your product here. If these release notes cover service packs or patches in addition to the major release numbers, briefly identify each version covered.--> Fixes and Enhancements <!--*This section may be removed if this is the first release of a product. If multiple releases are covered by this note, for example, if service packs and patches are added, these can either sectioned by release, or, if lengthy, can have sub-pages per release.* --> Fixes This section lists items that were resolved in release { x.x.x.xxxx } - { mm/dd/yyyy } . Item Description {work item #} { work item release note } Enhancements This section lists features that were added in release { x.x.x.xxxx } - { mm/dd/yyyy } . <!--*Using bullet style:*--> { new feature } { new feature } <!--OR *Using table style:*--> Item Description {work item #} { feature description } Known Issues This section lists problems and enhancements that have been deferred until a future release. <!--*Use bullets and tables as necessary (table format below).* --> Item Description { item #} { problem/enhancement description } Setup <!--*This section may be removed if the setup instructions are captured within a separate topic in the same manual.*--> Operating Systems <!--*Insert text here. For example:*--> This release supports Windows Server 2019, Windows Server 2016, and Windows 10 (32 and 64 bit). Server Platforms <!--*Insert text here.*--> Distribution Kit Files <!--*Insert text here. Please list the files, redistributables, additional .EXEs or MSI’s that are including in the setup kit if appropriate.*--> Installation and Upgrade <!--*Provide clear installation and upgrade instructions. Include guidance on specific steps needed to confirm that an upgrade scenario was successful. If additional guidance is required for repairing the product once its installed please include guidance in this section.*--> Uninstalling Product <!--*Insert text here.*--> Security Information and Guidance OSIsoft’s Commitment Because the PI System often serves as a barrier protecting control system networks and mission-critical infrastructure assets, OSIsoft is committed to (1) delivering a high-quality product and (2) communicating clearly what security issues have been addressed. This release of { product name } is the highest quality and most secure version of the { product name } released to date. OSIsoft's commitment to improving the PI System is ongoing, and each future version should raise the quality and security bar even further. Vulnerability Communication The practice of publicly disclosing internally discovered vulnerabilities is consistent with the Common Industrial Control System Vulnerability Disclosure Framework developed by the Industrial Control Systems Joint Working Group (ICSJWG). Despite the increased risk posed by greater transparency, OSIsoft is sharing this information to help you make an informed decision about when to upgrade to ensure your PI System has the best available protection. For more information, refer to OSIsoft’s Ethical Disclosure Policy (https://www.osisoft.com/ethical-disclosure-policy) . To report a security vulnerability, refer to OSIsoft's Report a Security Vulnerability (https://www.osisoft.com/report-a-security-vulnerability) . Vulnerability Scoring OSIsoft has selected the Common Vulnerability Scoring System (CVSS) to quantify the severity of security vulnerabilities for disclosure. To calculate the CVSS scores, OSIsoft uses the National Vulnerability Database (NVD) calculator maintained by the National Institute of Standards and Technology (NIST). OSIsoft uses High, Medium and Low categories to aggregate the CVSS Base scores. This removes some of the opinion related errors of CVSS scoring. As noted in the CVSS specification, Base score range from 0 for the lowest severity to 10 for the highest severity. Overview of New Vulnerabilities Found or Fixed This section is intended to provide relevant security-related information to guide your installation or upgrade decision. OSIsoft is proactively disclosing aggregate information about the number and severity of { product name } security vulnerabilities that are fixed in this release. <!--*Provide an overview of the types of Security Vulnerabilities fixed in this release*--> <!--*NOTE: If NO security vulnerabilities are identified in the current release, please use the following statement:*--> No security-related information is applicable to this release <!--*When vulnerabilities exist Product teams should decide which format works best specific to the release and/or is applicable. Two different samples are provided below.*--> Sample A - For this release of the { product name } , { x number } of security vulnerability has been identified and fixed. Based on the CVSS scoring system this issue has been categorized as a High (7.0 – 8.9). This high-level security issue is network accessible and has been resolved in the { product release name } . To reduce exposure to this security issue, either limit access to the port used by the PI SQL products, or upgrade to the latest release. Sample A with OSIsoft sub-component - Based on the CVSS scoring system this issue has been categorized as a High (7.0 – 8.9). This high-level security issue has been resolved in { OSIsoft’s PI SDK version 1.1 sub-component } which has been packaged in this { PI ProcessBook 1998 release } . To reduce exposure to this security issue upgrade to the latest release. Sample A with 3rd Party sub-component - Based on the CVSS scoring system this issue has been categorized as a High (7.0 – 8.9). This high-level security issue has been resolved in the 3rd Party { OpenSSL sub-component } which has been packaged in this { PI ProcessBook 1998 release } . To reduce exposure to this security issue upgrade to the latest release. Sample B - For this release of the { product name } , {x number} of security vulnerability has been identified and fixed. The table below provides an overview of the types and severity of the security fixes. Security Vulnerabilities fixed in this release Severity Category CVSS Base Score Range Number of Fixed Vulnerabilities Critical 9.0-10 { quantity } High 7.0-8.9 { quantity } Medium 4.0-6.9 { quantity } Low 0-3.9 { quantity } Sample B with sub-components - For this release of the {product name} , {x number} of security vulnerability has been identified and fixed. The tables below provide an overview of the types and severity of the security fixes. { Some/All } of the vulnerabilities were associated with {OSIsoft/3rd Party} sub-component { name } which is packaged in this release. Summary of Security Vulnerabilities fixed in this release Severity Category CVSS Base Score Range Number of Fixed Vulnerabilities Critical 9.0-10 { quantity } High 7.0-8.9 { quantity } Medium 4.0-6.9 { quantity } Low 0-3.9 { quantity } Security Vulnerabilities fixed in the {OSIsoft/3rd Party} sub-component { name } Severity Category CVSS Base Score Range Number of Fixed Vulnerabilities Critical 9.0-10 { quantity } High 7.0-8.9 { quantity } Medium 4.0-6.9 { quantity } Low 0-3.9 { quantity } <!--*Optional “Microsoft Software Security Defenses topic below” (applies to C++ projects)*--> Microsoft Software Security Defenses In addition to finding and fixing security bugs within the { product name } , it is equally critical that OSIsoft leverage security defenses provided by the Microsoft Visual C++ compiler that builds it and the Microsoft Windows operating system that runs it. Over the past decade, Microsoft has continually added new defenses and improved existing defenses with successive versions of the compiler and the operating system. To learn more about many of these key defenses, consult the Microsoft whitepaper Mitigating Software Vulnerabilities. Documentation Overview <!--*This section may be removed if the information is captured within a separate topic in the same manual. Example:*--> PI Notifications User Guide: An introduction to PI Notifications for the end user. This user guide provides a product overview, installation procedures, a tutorial to acquaint you with the user interface for PI Notifications, and other topics to allow you to work with and troubleshoot PI Notifications. PI System Explorer User Guide: Provides an overview and explains the functions of the PI System Explorer interface. Technical Support and Resources <!--*This section may be removed if the information is captured within a separate topic in the same manual.*--> For technical assistance, contact OSIsoft Technical Support at +1 510-297-5828 or log a case through the OSIsoft Customer Portal. Additionally, the Contact Us page on the portal offers contact options for customers outside of the United States. When you contact OSIsoft Technical Support, be prepared to provide this information: Product name, version, and build numbers Computer platform (CPU type, operating system, and version number) Time that the difficulty started Log files at that time Details of any environment changes prior to the start of the issue Summary of the issue, including any relevant log files during the time the issue occurred The PI Square community has resources to help you with your technical questions. PI Developers Club program offers specific services to developers and system integrators. <!--*This section may be removed if the release note is included as a topic in a broader manual.*--> OSIsoft, LLC 1600 Alvarado Street San Leandro, CA 94577 USA Tel: (01) 510-297-5800 Fax: (01) 510-357-8136 Web: http://www.osisoft.com No part of this publication may be reproduced, stored in a retrieval system, or transmitted, in any form or by any means, mechanical, photocopying, recording, or otherwise, without the prior written permission of OSIsoft, LLC. OSIsoft, the OSIsoft logo and logotype, Managed PI, OSIsoft Advanced Services, OSIsoft Cloud Services, OSIsoft Connected Services, PI ACE, PI Advanced Computing Engine, PI AF SDK, PI API, PI Asset Framework, PI Audit Viewer, PI Builder, PI Cloud Connect, PI Connectors, PI Data Archive, PI DataLink, PI DataLink Server, PI Developers Club, PI Integrator for Business Analytics, PI Interfaces, PI JDBC Driver, PI Manual Logger, PI Notifications, PI ODBC Driver, PI OLEDB Enterprise, PI OLEDB Provider, PI OPC DA Server, PI OPC HDA Server, PI ProcessBook, PI SDK, PI Server, PI Square, PI System, PI System Access, PI Vision, PI Visualization Suite, PI Web API, PI WebParts, PI Web Services, RLINK and RtReports are all trademarks of OSIsoft, LLC. All other trademarks or trade names used herein are the property of their respective owners. U.S. GOVERNMENT RIGHTS Use, duplication or disclosure by the US Government is subject to restrictions set forth in the OSIsoft, LLC license agreement and as provided in DFARS 227.7202, DFARS 252.227-7013, FAR 12-212, FAR 52.227-19, or their successors, as applicable. Version: { version } Published: { date published }"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the PI adapter administration level functions, you can start and stop an adapter service and the individual adapter ingress components. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl , a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure PI adapters with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can accomplish data retrieval steps ( GET commands) using a browser, if available on your device. For more information on PI adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When you remove an adapter component, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data remain on the respective endpoints. Complete the following steps to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Run a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/<ComponentId> Note: You must make an empty DELETE command against the Id of the component you want to delete. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Delete OpcUa1 adapter component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1\" File relocation All configuration and log files are renamed and moved. The files are renamed according to the timestamp of removal, for example, FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/Configuration/Removed Log files are moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/Logs/Removed In the following example, one Modbus adapter service is installed on a particular Windows node with the name ModbusService1 . A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/ ComponentId DELETE Deletes specified component Note: Replace ComponentId with the Id of the component that you want to delete."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core framework, and the operating system that the adapter is running on. Complete the following steps to retrieve the product version information of a PI adapter: Use any of the Configuration tools capable of making HTTP requests. Run a GET command to the following endpoint: http://localhost:5590/api/v1/Diagnostics/ProductInformation Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Get product information for adapter hosted on port 5590 curl \"http://localhost:5590/api/v1/Diagnostics/ProductInformation Example result: { \"Application Version\":\"1.2.0.37\", \".Net Core Version\":\".NET Core 3.1.5\", \"Operating System\":\"Linux 4.15.0-106-generic #107-Ubuntu SMP Thu Jun 4 11:27:52 UTC 2020\" }"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete the procedure appropriate for your operating system to start or stop an adapter service: Windows Open Windows services. Select PI Adapter for AdapterName , for example, PI Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following commands: Example: Start PI Adapter for OPC UA systemctl start PI Adapter for OPC UA Example: Stop PI Adapter for Modbus TCP systemctl stop PI Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component To control data ingress, you can start and stop the ingress components of an adapter whenever necessary. By default, all currently configured ingress components are started. Start an ingress component Complete the following steps to start an individual ingress component: Use any of the Configuration tools capable of making HTTP requests. Run a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Start the OpcUa1 ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/OpcUa1/Start\" Stop an ingress component Complete the following steps to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Run a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Stop the Modbus1 ingress component curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/Modbus1/Stop\""
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/ARCHIVE/Diagnostics configuration.html": {
    "href": "V1/main/V1/ARCHIVE/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration You can configure OSIsoft adapters to produce and store diagnostics data at a designated health endpoint. For more information about available diagnostics data, see Adapter diagnostics . Configure diagnostics Start any of the Configuration tools capable of making HTTP requests. Run a PUT command to the following endpoint and set the enableDiagnostics parameter to either true or false : http://localhost:5590/api/v1/configuration/system/diagnostics Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \"enableDiagnostics\":true }\" -X PUT \"http://localhost:5590/api/v1/configuration/system/diagnostics\" Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters The following parameters are available for configuring diagnostics: Parameter Required Type Description EnableDiagnostics Required boolean Determines whether Diagnostics are enabled Example Retrieve the diagnostics configuration Example using curl : curl -X GET \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration You can configure PI adapters to buffer data egressed from the adapter to endpoints. Buffering is configured through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless it is necessary. Changes to the buffering configuration parameters only take effect during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in the JSON format. For content structure, see the sample output in Examples - Retrieve the buffering configuration . For a table of all available parameters, see Buffering parameters . Save the file. For example, Buffering.json . Use any of the Configuration tools capable of making HTTP requests and run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/system/buffering Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"@Buffering.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" Note: Run this command from the same directory where the file is located. Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnablePersistentBuffering Optional boolean Enables or disables on-disk buffering Allowed value: true or false Default value: true Note: If you disable persistent buffering, in-memory buffering is used. In-memory buffering is limited by value in the MaxBufferSizeMB property. MaxBufferSizeMB Optional integer Defines the maximum size of the buffer files that are persisted on disk or used in memory when EnablePersistentBuffering is set to false per configured endpoint. The unit is specified in MB (1 Megabyte = 1048576 bytes). Consider the capacity and the type of storage medium to determine a suitable value for this parameter. Minimum value: 1 Maximum value: 2147483647 Default value: 1024 BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Consider the access-control list (ACL) when you set this parameter. Allowed value: Valid path to a folder location in the file system Default value: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterInstance}\\Buffers Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Buffers Examples The following examples are buffering configurations made through the curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Buffers\", \"maxBufferSizeMB\": 1024, \"enablePersistentBuffering\": true } 200 OK response indicates success. Update MaxBufferSizeMb parameter curl -d \"{ \"MaxBufferSizeMB\": 100 }\" -H \"Content-Type: application/json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering GET Gets the buffering configuration api/v1/configuration/system/buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools You can configure PI adapters with the EdgeCmd utility, OSIsoft's proprietary tool for configuring adapters, or a commonly used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . REST tools The following tools are available to make REST calls: curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. You can script curl with Bash or PowerShell on Linux or Windows and you can use it to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) . Postman Postman is a REST tool for systems with GUI components. PI adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about PI Adapter REST APIs. For more information, see Postman (https://www.postman.com/) ."
  },
  "V1/main/V1/Configuration/Data filters configuration.html": {
    "href": "V1/main/V1/Configuration/Data filters configuration.html",
    "title": "Data filters configuration",
    "keywords": "Data filters configuration PI adapters can be configured to perform data filtering to save network bandwidth. Every data item in the data selection configuration can be assigned the id of a data filter. The adapter will then filter data for those data items based on the data filter configuration. Configure data filters Complete the following steps to change the data filters configuration: Using any text editor, create a file that contains the data filters configuration in the JSON format. For content structure, see Data filters example . For all available parameters, see Data filters parameters . Save the file, for example, as Component_DataFilters.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/DataFilters . Note: Replace <ComponentId> with the ComponentId of the adapter, for example, Modbus1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"@ComponentId_DataFilters.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/DataFilters\" Note: Run this command from the same directory where the file is located. On successful execution, the change that you have made to data filters takes effect immediately during runtime. Data filters schema The full schema definition for the data filters configuration is in the AdapterName_DataFilters_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Data filters parameters The following parameters are available for configuring data filters: Parameter Required Type Description Id Required string Unique identifier for the data filter. Allowed value: any string identifier AbsoluteDeadband Optional double Specifies the absolute change in data value that should cause the current value to pass the filter test. Note: You must specify AbsoluteDeadband or PercentChange . Allowed value: double value representing absolute deadband number Default value: null PercentChange Optional double Specifies the percent change from previous value that should cause the current value to pass the filter test. Note: You must specify AbsoluteDeadband or PercentChange . Allowed value: double value representing percent change Default value: null ExpirationPeriod Optional timespan The length in time that can elapse after an event before automatically storing the next event. The expected format is HH:MM:SS.###. * Allowed value: any timespan Default value: null * Note: You can also specify timespans as numbers in seconds. For example, \"ExpirationPeriod\": 25 specifies 25 seconds, or \"ExpirationPeriod\": 125 specifies 2 minutes and 5 seconds. Data filters example [ { \"Id\": \"DuplicateData\", \"AbsoluteDeadband\": 0, \"PercentChange\": null, \"ExpirationPeriod\": \"01:00:00\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataFilters GET Gets all configured data filters. api/v1/configuration/ ComponentId /DataFilters DELETE Deletes all configured data filters. api/v1/configuration/ ComponentId /DataFilters POST Adds an array of data filters or a single data filter. Fails if any data filter already exists. api/v1/configuration/ ComponentId /DataFilters PUT Replaces all data. api/v1/configuration/ ComponentId /DataFilters PATCH Allows partial updating of configured data filter. api/v1/configuration/ ComponentId /DataFilters/ id GET Gets configured data filter by id . api/v1/configuration/ ComponentId /DataFilters/ id DELETE Deletes configured data filter by id . api/v1/configuration/ ComponentId /DataFilters/ id PUT Replaces data filter by id . Fails if data filter does not exist. Note: Replace ComponentId with the Id of your adapter component, for example, Modbus1."
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. OSIsoft Cloud Services (OCS) and PI servers through PI Web API are supported destinations. An egress endpoint represents a destination to which data is sent. You can specify multiple endpoints. Every egress endpoint is run independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoint configurations, see REST URLs . Complete the following steps to configure egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in the JSON format. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file. For example, OmfEgress_DataEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and run the appropriate command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Examples using curl : Note: Run the commands from the same directory where the file is located. Add endpoints curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" Delete an endpoint curl -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" Update an endpoint curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{Id}\" View endpoints curl -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Description Id Optional string Unique identifier Allowed value: any string identifier Default value: new GUID Endpoint Required string Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI Server. Allowed value: well-formed http or https endpoint string Default: null Username Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint Allowed value: any string Default: null Password Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint Allowed value: any string Default: null ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint Allowed value: any string Default: null ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint Allowed value: any string Default: null TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint Allowed value: well-formed http or https endpoint string Default value: null ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Note: Only use for testing with self-signed certificates. Allowed value: true or false Default value: true Examples The following examples are valid egress configurations: Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API [{ \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints PATCH Allows partial updating of configured endpoints. Note: The request must be an array containing one or more endpoints. Each endpoint in the array must include its Id . api/v1/configuration/omfegress/DataEndpoints/{Id} GET Gets configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} DELETE Deletes configured endpoint by Id api/v1/configuration/omfegress/DataEndpoints/{Id} PUT Updates or creates a new endpoint with the specified Id api/v1/configuration/omfegress/DataEndpoints/{Id} PATCH Allows partial updating of configured endpoint by Id Egress execution details After configuring an egress endpoint, egress is immediately run for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers are egressed. After that only new or changed types or containers are egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If you delete an egress endpoint, data flow immediately stops for that endpoint. Buffered data in a deleted endpoint is permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the egress destination, failure to add a single item results in the message failing. Types, containers, and data are egressed as long as the destination continues to respond to HTTP requests."
  },
  "V1/main/V1/Configuration/General configuration.html": {
    "href": "V1/main/V1/Configuration/General configuration.html",
    "title": "General configuration",
    "keywords": "General configuration You can configure PI adapters to produce and store diagnostics data at a designated health endpoint, and to send metadata for created streams. For more information about available diagnostics data, see Adapter diagnostics and Egress diagnostics . For more information about available metadata and what metadata are sent per metadata level, see Adapter Metadata . Configure general Start any of the Configuration tools capable of making HTTP requests. Run a PUT command to the following endpoint, setting the enableDiagnostics to either true or false and MetadataLevel to None , Low , Medium , or High : http://localhost:5590/api/v1/configuration/system/general Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : curl -d \"{ \\\"enableDiagnostics\\\":true, \\\"enableMetadata\\\":false }\" -X PUT \"http://localhost:5590/api/v1/configuration/system/general\" General schema The full schema definition for the general configuration is in the System_General_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas General parameters The following parameters are available for configuring general: Parameter Required Type Description EnableDiagnostics Optional boolean Determines if diagnostics are enabled Allowed value: true or false Default value: true MetadataLevel Optional reference Defines amount of metadata sent to OMF endpoints. Allowed value: None , Low , Medium , and High Default value: Medium Example Retrieve the general configuration Example using curl : curl -X GET \"http://localhost:{port}/api/v1/configuration/system/general\" Sample output: { \"EnableDiagnostics\": true, \"MetadataLevel\": \"Medium\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/General GET Gets the general configuration api/v1/configuration/system/General PUT Replaces the existing general configuration api/v1/configuration/system/General PATCH Allows partial updating of general configuration"
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration You can configure PI adapters to produce and store health data at a designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OMF endpoint where adapter health information is sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in the JSON format. For content structure, see Examples . For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file. For example, HealthEndpoints.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint. Note: 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints\" PUT endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints/{Id} Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints/OCS\" Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json file located in one of the following folders: Windows: *%ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Allowed value: any string identifier Default value: new GUID Endpoint Required string The URL of the OMF endpoint to receive this health data Allowed value: well-formed http or https endpoint string Default: null Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint Allowed value: any string Default: null Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint Allowed value: any string Default: null ClientId Required for OCS endpoints string The client ID used for authentication with an OSIsoft Cloud Services OMF endpoint Allowed value: any string Default: null ClientSecret Required for OCS endpoints string The client secret used for authentication with an OSIsoft Cloud Services OMF endpoint Allowed value: any string Default: null TokenEndpoint Optional for OCS endpoints string Retrieves an OCS token from an alternative endpoint Allowed value: well-formed http or https endpoint string Default value: null ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends keeping this set to the default, true, in production environments. Allowed value: true or false Default value: true Examples OCS endpoint { \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } PI Web API endpoint { \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/healthEndpoints GET Gets all configured health endpoints api/v1/configuration/system/healthEndpoints DELETE Deletes all configured health endpoints api/v1/configuration/system/healthEndpoints POST Adds an array of health endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/system/healthEndpoints PUT Replaces all health endpoints. Note: Requires an array of endpoints api/v1/configuration/system/healthEndpoints PATCH Allows partial updating of configured health endpoints Note: The request must be an array containing one or more health endpoints. Each health endpoint in the array must include its Id . api/v1/configuration/system/healthEndpoints/ Id GET Gets configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ Id DELETE Deletes configured health endpoint by Id api/v1/configuration/system/healthEndpoints/ Id PUT Updates or creates a new health endpoint with the specified Id api/v1/configuration/system/healthEndpoints/ Id PATCH Allows partial updating of configured health endpoint by Id Note: Replace Id with the Id of the health endpoint."
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration PI adapters write daily log messages for the adapter, the system, and OMF egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters{AdapterInstance}\\Logs • Linux: /usr/share/OSIsoft/Adapters/{AdapterInstance}/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following steps to change the logging configuration: Using any text editor, create a file that contains the logging configuration in the JSON format. For content structure, see Example . For all available parameters, see Logging parameters . Save the file. For example, Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter. For example, OpcUa1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Logging\" On successful execution, the log-level change takes effect immediately during runtime. The other configurations (log file size and file count) are updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file reverts to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description LogLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace , Debug , Information , Warning , Error , Critical , and None . Default log level: Information For detailed information about the log levels, see LogLevel . LogFileSizeLimitBytes Optional integer The maximum size (in bytes) of log files that the service will create for the component. The value must be a positive integer. Minimum value: 1000 Maximum value: 9223372036854775807 Default value: 34636833 LogFileCountLimit Optional integer The maximum number of log files that the service will create for the component. The value must be a positive integer. Minimum value: 1 Maximum value: 2147483647 Default value: 31 LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages should not be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information like the following can be useful for diagnosing potential application errors: - Version information related to the software at startup - External services used - Data source connection string - Number of measurements - Egress URL - Change of state “Starting” or “Stopping” - Configuration Warning Logs that highlight an abnormal or unexpected event in the application flow that does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity and not an application-wide failure. It can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. None Logging is disabled for the given component. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the installation default for a component: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging PUT Updates the system logging configuration api/v1/configuration/ ComponentId /Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ ComponentId /Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component. For example, Modbus1 or OpcUa1."
  },
  "V1/main/V1/Configuration/Schedules configuration.html": {
    "href": "V1/main/V1/Configuration/Schedules configuration.html",
    "title": "Schedules configuration",
    "keywords": "Schedules configuration You can configure PI adapters to run scans based on a schedule. If the adapter supports schedules, each data item in the data selection configuration can be assigned a schedule. The adapter will then sample data for those data items at the scheduled time. Note: If the adapter supports scheduling and you start an ingress component without a schedules configuration, a default schedules configuration will be added to be used as an example. Note: When the adapter framework scheduler misses or skips a scan due to any reason, either one of the following messages is printed: Scan skipped for schedule id <Id> or Scan missed for schedule <id> . Configure schedules Complete the following steps to change the schedules configuration: Using any text editor, create a file that contains the schedules configuration in the JSON format. For content structure, see Example . For all available parameters, see Schedules parameters . Save the file. For example, Component_Schedules.json*. Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Schedules . Note: Replace <ComponentId> with the ComponentId of the adapter. For example, Modbus1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@Component_Schedules.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Schedules\" On successful execution, the schedules change takes effect immediately during runtime. Schedules schema The full schema definition for the schedules configuration is in the AdapterName_Schedules_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Schedules parameters The following parameters are available for configuring schedules: Parameter Required Type Description Id Required string Unique identifier for the schedule Allowed value: any string identifier Period Required string The data sampling rate of the schedule. The expected format is HH:MM:SS.###. * Invalid input: null , negative timespan, zero Default value: null (must be specified) Offset Optional string The offset from the midnight when the schedule starts. The expected format is HH:MM:SS.### * Invalid input: negative timespan Default value: null * Note: You can also specify timespans as numbers in seconds. For example, \"Period\": 25 specifies 25 seconds, or \"Period\": 125 specifies 2 minutes and 5 seconds. Example [ { \"Id\": \"schedule1\", \"Period\": \"00:00:01.500\", \"Offset\": \"00:02:03\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /Schedules GET Gets all configured schedules api/v1/configuration/ ComponentId /Schedules DELETE Deletes all configured schedules api/v1/configuration/ ComponentId /Schedules POST Adds an array of schedules or a single schedule. Fails if any schedule already exists api/v1/configuration/ ComponentId /Schedules PUT Replaces all schedules api/v1/configuration/ ComponentId /Schedules/ id GET Gets configured schedule by id api/v1/configuration/ ComponentId /Schedules/ id DELETE Deletes configured schedule by id api/v1/configuration/ ComponentId /Schedules/ id PUT Replaces schedule by id . Fails if schedule does not exist api/v1/configuration/ ComponentId /Schedules/ id PATCH Allows partial updating of configured schedule by id Note: Replace ComponentId with the Id of your adapter component. For example, Modbus1."
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration You can configure the system and adapter components together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in the JSON format. For content structure, see Example . Save the file. For example, SystemAdapter.config.json . Use any of the Configuration Tools capable of making HTTP requests and run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@SystemAdapter.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error messages are returned in the result. Example Note : The following is an example configuration; it does not necessarily represent the configuration of the adapter that you are currently using. The data source and data selection configurations are different for every adapter. Sample OPC UA adapter configuration { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/OpcUa/Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration PI adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or the EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form where cryptographic key material is stored separately in a secure location. If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system individually using REST, but you can also configure the system as a whole with a single REST call. Configure system components The configuration of system components includes adding, updating, and deleting components. Add a system component Complete the following steps to add a new component to the system: Using any text editor, create a file that contains the component to be added to the system in the JSON format. For content structure, see Examples . For a table of all available parameters, see System components parameters . Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components, but only a single OmfEgress component is supported. The following example adds a Modbus TCP adapter: { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter to be added. Save the file. For example, AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to run either a POST or PUT command to their appropriate endpoint. Note: 5590 is the default port number. If you selected a different port number, replace it with that value. POST endpoint: http://localhost:5590/api/v1/configuration/system/components Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/components\" PUT endpoint: http://localhost:5590/api/v1/configuration/system/components/<componentId> Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components/Modbus1\" After the curl command completes successfully, you can configure or use the new component. Update system components Complete the following steps to update the system components, for example, by adding or deleting components. Using any text editor, create a file that contains the current system components configuration. For information on how to retrieve the system components configuration, see REST URLs . Delete or add components as you need. Note: You cannot delete the OmfEgress component. Save the file. For example, UpdateComponents.json Use any of the Configuration tools capable of making HTTP requests to run a PUT command with the contents of the file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. curl -d \"@UpdateComponents.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" Delete a system component Complete the following steps to delete an existing component: Start any of the Configuration tools capable of making HTTP requests. Run a DELETE command to the following endpoint, replacing <ComponentId> with the ID of the component that you want to delete: http://localhost:5590/api/v1/configuration/system/components/<ComponentId>/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl : Note: Run this command from the same directory where the file is located. Delete OpcUa1 component curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1/\" All the logs and configurations files for the deleted components are moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The full schema definition for the system components configuration is in the System_Components_schema.json file located in one of the following folders: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components: Parameters Required Type Description ComponentId Required string The ID of the component. It can be any alphanumeric string, for example, OmfEgress. A properly configured ComponentID follows these rules: Cannot contain leading or trailing space Cannot use the following characters: > < / : ? # [ ] @ ! $ & * \\ \" ( ) \\\\ + , ; = \\| ` { } ComponentType Required string The type of the component, for example, OmfEgress. There are two types of components: OmfEgress and the adapter. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components GET Retrieves the system components configuration api/v1/configuration/system/components POST Adds a new component to the system configuration api/v1/configuration/system/components PUT Updates the system components configuration api/v1/configuration/system/components/ componentId DELETE Deletes a specific component from the system components configuration api/v1/configuration/system/components/ componentId PUT Creates a new component with the specified componentId in the system configuration"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data that is sent to all health endpoints. The System_Diagnostics.json file contains a flag that determines whether diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Every minute, dynamic data is sent to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The Elements root contains a link to an Adapters node. This is the root node for all adapter instances. Below Adapters , you will find one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: {ComputerName}.{ServiceName} . For example, in the following image, MachineName is the computer name and OpcUa is the service name. To see the System.Diagnostics values, click on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics stream: IO rate The Diagnostics.Egress.IORate dynamic type includes the following values, which are logged in a stream with the Id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate . IORate includes only sequential data successfully sent to an egress endpoint. Property Type Description timestamp string Timestamp of event IORate double One-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.ErrorRate . Property Type Description timestamp string Timestamp of event ErrorRate double One-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes the following values, which are logged in a stream with the Id {componentid}.IORate . IORate includes only sequential data collected from a data source. Property Type Description timestamp string Timestamp of event IORate double One-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes the following values, which are logged in a stream with the Id {componentid}.StreamCount . The StreamCount and TypeCount include only types and streams created for sequential data received from a data source. Property Type Description timestamp string Timestamp of event StreamCount int Number of streams created by the adapter instance TypeCount int Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the Id System.Diagnostics . This diagnostic stream contains system level information related to the host platform that the adapter is running on. Property Type Description timestamp string Timestamp of event ProcessIdentifier int Process Id of the host process StartTime string Time at which the host process started WorkingSet long Amount of physical memory in bytes, allocated for the host process TotalProcessorTime double Total processor time for the host process expressed in seconds TotalUserProcessorTime double User processor time for the host process expressed in seconds TotalPrivilegedProcessorTime double Privileged processor time for the host process expressed in seconds ThreadCount int Number of threads in the host process HandleCount int Number of handles opened by the host process ManagedMemorySize double Number of bytes currently thought to be allocated in managed memory Unit of Measure = megabytes PrivateMemorySize double Amount of paged memory in bytes allocated for the host process Unit of Measure = megabytes PeakPagedMemorySize double Maximum amount of memory in the virtual memory paging file in bytes used by the host process. Unit of Measure = megabytes StorageTotalSize double Total size of the storage medium in use by the system Unit of Measure = megabytes StorageFreeSpace double Free space available Unit of Measure = megabytes Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health PI Adapters produce different kinds of health data that can be egressed to different health endpoints. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data is available: Device status Next Health Message Expected Health endpoint differences Two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it to configured PI servers for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following example: The dynamic health data is time-series data that is stored in PI points on a PI Data Archive. You can see it in the AF hierarchy as PI point data reference attributes. OSIsoft Cloud Services does not currently provide a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data is stored. Each value is its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of Good is expected. Property Type Description Time string Timestamp of the event DeviceStatus string The value of the DeviceStatus The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to fail over. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics PI Adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and that data flows to the configured OMF endpoints. For more information on available health data, see Adapter health . PI Adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics to true . For more information on available diagnostics data, see Adapter diagnostics ."
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected is sent by an individual adapter data component on a periodic basis while it is functioning properly. This value is a timestamp that indicates when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, and so on. Property Type Description Time string Timestamp of the event NextHealthMessageExpected string Timestamp when next value is expected"
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter You can install adapters on either a Windows or Linux operating system. Before installing the adapter, see Installation prerequisites to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following steps to install a PI adapter on a Windows computer: Download the Windows .msi file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Run the .msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590 . Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned. Linux Complete the following steps to install a PI adapter on a Linux computer: Download the appropriate Linux distribution file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo app install command. Examples : To install the Linux ARM Debian package, run the command sudo apt install ./Modbus_linux-arm.deb To install the Linux x64 package, run the command sudo apt install ./Modbus_linux-x64.deb Optional: To verify the installation, run the following curl command with the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned."
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Alternatively, you can build custom installers or containers for Linux. For more information, see the Docker instructions in the documentation of the respective adapter."
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete the procedure appropriate for your operating system to uninstall a PI adapter: Windows To delete the PI adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not deleted by the uninstall process. Optional: To delete data, configuration, and log files, delete the directory %ProgramData%\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to the configuration and log files. Linux To delete PI Adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove pi.adapter.<AdapterName> Optional: To delete data, configuration, and log files, delete the directory /usr/share/OSIsoft/Adapters/AdapterName . This deletes all data processed by the adapter and configuration and log files. Alternatively, run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/Metadata/Adapter Metadata.html": {
    "href": "V1/main/V1/Metadata/Adapter Metadata.html",
    "title": "Adapter metadata",
    "keywords": "Adapter metadata If the metadataLevel is set to Low or higher in the General configuration , adapter streams created by the ingress components include the following metadata: Datasource: {ComponentId} AdapterType: {ComponentType} ComponentId corresponds to the adapter components' data source configured in the Components configuration . ComponentType corresponds to the adapter type. For example, Modbus or OpcUa. Metadata for health and diagnostics streams If you configure a health endpoint and enable metadata, they are included in the health streams ( Device status and Next health message expected ) together with ComponentId and ComponentType . If you enable diagnostics in General configuration , metadata are included in the diagnostics streams ( Stream count , IO rate , Error rate ) together with ComponentId and ComponentType . The adapter may also send its own stream metadata not including health and diagnostics streams. For more information about what custom metadata is included in each stream, see the user guide for your adapter. Note: Metadata is only sent for streams created by the ingress components. Currently, the only endpoint that persists sent metadata is OCS (OSIsoft Cloud Services)."
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Technical support and feedback.html": {
    "href": "V1/main/V1/Technical support and feedback.html",
    "title": "Technical support and feedback",
    "keywords": "Technical support and feedback OSIsoft provides several ways to report issues and provide feedback on PI Adapters. Technical support For technical assistance with PI Adapters, contact OSIsoft Technical Support through the OSIsoft Customer Portal . We can help you identify the problem, provide workarounds and address any concerns you may have. Remote access to your facilities may be necessary during the session. Note: You must have an account set up in the OSIsoft Customer Portal before you can open a case. If you do not have a portal account, see How to Get a Login to OSIsoft Customer Portal . Alternatively, call OSIsoft Technical Support at +1 510-297-5828. When you contact OSIsoft Technical Support, be prepared to provide this information: Product name, version, and build numbers Details about your computer platform (CPU type, operating system, and version number) Time that the difficulty started Log files at that time Details of any environment changes prior to the start of the issue Summary of the issue, including any relevant log files during the time the issue occurred <!--To view a brief primer on PI Adapters, see the [PI Adapters playbook](https://customers.osisoft.com/s/knowledgearticle?knowledgeArticleUrl=Playbook-PI-adapters) in the OSIsoft Customer Portal.--> <!--## Product feedback--> <!--To submit product feedback for PI Adapters, visit the [PI Adapters feedback page](https://feedback.osisoft.com/forums/123456-PI-adapters). The product team at OSIsoft regularly monitors the page.--> Documentation feedback To submit documentation feedback for PI Adapters, send an email to documentation@osisoft.com . Be sure to include the following information with your feedback: Product name and version Documentation topic URL Details of the suggestion or error The technical documentation team at OSIsoft will review and respond to your feedback."
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/PI Adapter for Modbus TCP overview/PI Adapter for Modbus TCP principles of operation.html": {
    "href": "V1/PI Adapter for Modbus TCP overview/PI Adapter for Modbus TCP principles of operation.html",
    "title": "PI Adapter for Modbus TCP principles of operation",
    "keywords": "PI Adapter for Modbus TCP principles of operation This adapter's operations focus on data collection and stream creation. Adapter configuration For the Modbus TCP adapter to start data collection, configure the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Select Modbus TCP items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more details, see PI Adapter for Modbus TCP data source configuration and PI Adapter for Modbus TCP data selection configuration . Connection The adapter communicates with the Modbus TCP devices through the TCP/IP network by sending request packets that are constructed based on the data selection configurations. It collects the response packets returned by the devices. Data collection The adapter collects data from the Modbus TCP devices at the polling rates that you specify. The rates are set in each of the data selection configurations and can range from 0 milliseconds (as fast as possible) up to 1 day per polling. The adapter automatically optimizes the data collection process by grouping the requests to reduce the I/O load imposed on the Modbus TCP networks. For more information see PI Adapter for Modbus TCP data selection configuration . Data types The adapter converts readings from single or multiple registers into the data types specified by the data type code and populates the value into streams. The following table lists all data types with their corresponding type codes supported by the adapter. Data type code Data type name Value type Register type Description 1 Boolean Boolean Bool 0 = false 1 = true 10 Int16 Int16 Bool/16-bit Read 1 Modbus TCP register 1 and interpret as a 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 2 20 UInt16 UInt16 Bool/16-bit Read 1 Modbus TCP register 1 and interpret as an unsigned 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 2 30 Int32 Int32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [DCBA] read from the device are stored as [ABCD]. 2 31 Int32ByteSwap Int32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [BADC] read from the device are stored as [ABCD]. 2 100 Float32 Float32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [DCBA] read from the device are stored as [ABCD]. 2 101 Float32ByteSwap Float32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [BADC] read from the device are stored as [ABCD]. 2 110 Float64 Float64 16-bit/32-bit Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [HGFEDCBA] read from the device are stored as [ABCDEFGH]. 2 111 Float64ByteSwap Float64 16-bit/32-bit Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [BADCFEHG] read from the device are stored as [ABCDEFGH]. 2 1001 - 1250 String String 16-bit/32-bit 1001 reads a one-character string, 1002 reads a two-character string, and 1003 reads a three-character string and so on. Bytes [AB] are interpreted as \"AB\". 2001 - 2250 StringByteSwap String 16-bit/32-bit 2001 reads a one-character string, 2002 reads a two-character string, and 2003 reads a three-character string and so on. Bytes [BA] are interpreted as \"AB\". 1 For more information about Modbus TCP registers, see How is data stored in Standard Modbus? (https://www.se.com/us/en/faqs/FA168406/) 2 Bytes are read in reverse order. Stream creation From the parsed data selection configurations, the adapter creates types, streams, and data based on the information provided. For each measurement in the data selection configuration, a stream is created to store time series data. Streams by Modbus TCP adapter For each data selection configuration, the adapter creates a stream with two properties, which are described in the following table: Property name Data type Description Timestamp String The response time of the stream data from the Modbus TCP device Value Specified by the data selection The value of the stream data from the Modbus TCP device Certain metadata are sent with each stream created. The following metadata are common for every adapter type: ComponentId : Specifies the data source, for example, Modbus1 ComponentType : Specifies the type of adapter, for example, Modbus Each stream created for the selected measurement has a unique identifier or \"Stream ID.\" If you specify a custom stream ID for the measurement in the data selection configuration, the adapter uses that stream ID to create the stream. Otherwise, the adapter constructs the stream ID using the following format: <Adapter Component ID>.<Device ID>.<Unit ID>.<Register Type>.<Register Offset> Note: Naming convention is affected by StreamIdPrefix and ApplyPrefixToStreamID settings in the data source configuration. For more information, see PI Adapter for Modbus TCP data source configuration ."
  },
  "V1/PI Adapter for Modbus TCP overview/PI Adapter for Modbus TCP supported features.html": {
    "href": "V1/PI Adapter for Modbus TCP overview/PI Adapter for Modbus TCP supported features.html",
    "title": "PI Adapter for Modbus TCP supported features",
    "keywords": "PI Adapter for Modbus TCP supported features For certain data types, the adapter supports applying bitmaps and applying data conversion. Bitmap application The adapter supports applying bitmaps to the value converted from reading the Modbus TCP devices. A bitmap is a series of numbers used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz , where uu , vv , ww , xx , yy , and zz each refer to a single bit. Bitmaps require a leading zero if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Bitmaps can reference up to 16 bits for a 16-bit word (data types 10 and 20) and up to 32 bits for a 32-bit word (data types 30 and 31). For example, the bitmap 0307120802 maps the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, the seventh bit to the fourth bit, and the third bit to the fifth bit. The high-order bits of the new word are padded with zeros if they are not specified. Not all data types support bitmapping. The data types that support bitmaps include: Int16 (Data type code 10 ) UInt16 (Data type code 20 ) Int32 (Data type code 30 and 31 ) Data conversion application The adapter supports applying data conversion to the value converted from reading Modbus TCP devices. You can specify a conversion factor and conversion offset. The conversion factor is used for scaling the value up or down and the conversion offset is used for shifting the value. The mathematical equation for conversion is represented below: <After Conversion> = <Before Conversion> / Factor - Offset Not all data types support applying data conversion. The following data types support conversion: Int16 (Data type code 10 ) UInt16 (Data type code 20 ) Int32 (Data type code 30 and 31 ) Float32 (Data type code 100 and 101 ) The value with data conversion applied is always converted to the 32-bit float type to maintain the precision of the conversion factor and conversion offset."
  },
  "V1/PI_Adapter_for_Modbus_TCP_overview.html": {
    "href": "V1/PI_Adapter_for_Modbus_TCP_overview.html",
    "title": "PI Adapter for Modbus TCP overview",
    "keywords": "PI Adapter for Modbus TCP overview PI Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF endpoints in OSIsoft Cloud Services or PI Servers. Modbus TCP is a commonly available communication protocol used for connecting and transmitting information between industrial electronic devices. The adapter can connect to any device that uses the Modbus TCP communication protocol. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/Release Notes/Release Notes.html": {
    "href": "V1/Release Notes/Release Notes.html",
    "title": "Release notes",
    "keywords": "Release notes PI Adapter for Modbus TCP is a new product from OSIsoft. It is supported on a variety of platforms and processors. In addition to ready-to-use install kits, OSIsoft also provides examples of how to create Docker containers in a separate file, and provides tar.gz files with binaries for customers who want to build their own custom installers or containers for Linux. For detailed installation instructions, see the Installation section. Security PI Adapter for Modbus TCP was developed following the Security Development Lifecycle (SDL) process. This is a new product and there are no known security issues with this initial release."
  }
}